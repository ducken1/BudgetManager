import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import axios from 'axios';
import Dashboard from '../Dashboard';

jest.mock('axios');

describe('Dashboard Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  // 1. Fetch and display budgets
  test('fetches and displays budgets on mount', async () => {
    axios.get.mockResolvedValueOnce({
      data: [
        { _id: '1', name: 'Groceries', amount: 50, type: 'necessity' },
        { _id: '2', name: 'Netflix', amount: 15, type: 'luxury' },
      ],
    });

    render(<Dashboard />);

    expect(axios.get).toHaveBeenCalledWith('http://localhost:3000/budgets', expect.any(Object));
    expect(await screen.findByText(/groceries/i)).toBeInTheDocument();
    expect(screen.getByText(/netflix/i)).toBeInTheDocument();
  });

  jest.mock('react-router-dom', () => ({
    BrowserRouter: ({ children }) => <div>{children}</div>, // Mock BrowserRouter as a simple div wrapper
    Route: ({ children }) => <div>{children}</div>, // Mock Route
    Routes: ({ children }) => <div>{children}</div>, // Mock Routes
    Navigate: () => null, // Mock Navigate to do nothing
  }));

  // 2. Add a new budget
  test('adds a new budget correctly', async () => {
    axios.post.mockResolvedValueOnce({ status: 201 });
    axios.get.mockResolvedValueOnce({
      data: [{ _id: '1', name: 'Groceries', amount: 50, type: 'necessity' }],
    });

    render(<Dashboard />);

    fireEvent.change(screen.getByPlaceholderText(/budget name/i), { target: { value: 'Groceries' } });
    fireEvent.change(screen.getByPlaceholderText(/amount/i), { target: { value: '50' } });
    fireEvent.change(screen.getByRole('combobox'), { target: { value: 'necessity' } });

    fireEvent.click(screen.getByText(/add budget/i));

    await waitFor(() => expect(axios.post).toHaveBeenCalledWith(
      'http://localhost:3000/budgets/add',
      { name: 'Groceries', amount: 50, type: 'necessity' },
      expect.any(Object)
    ));
  });

  // 3. Edit a budget
  test('edits a budget correctly', async () => {
    axios.get.mockResolvedValueOnce({
      data: [{ _id: '1', name: 'Groceries', amount: 50, type: 'necessity' }],
    });

    axios.put.mockResolvedValueOnce({ status: 200 });

    render(<Dashboard />);
    fireEvent.click(await screen.findByText(/edit/i));

    fireEvent.change(screen.getByPlaceholderText(/budget name/i), { target: { value: 'Groceries Updated' } });
    fireEvent.change(screen.getByPlaceholderText(/amount/i), { target: { value: '100' } });

    fireEvent.click(screen.getByText(/save changes/i));

    await waitFor(() => expect(axios.put).toHaveBeenCalledWith(
      'http://localhost:3000/budgets/1',
      { name: 'Groceries Updated', amount: 100, type: 'necessity' },
      expect.any(Object)
    ));
  });

  // 4. Delete a budget
  test('deletes a budget correctly', async () => {
    axios.get.mockResolvedValueOnce({
      data: [{ _id: '1', name: 'Groceries', amount: 50, type: 'necessity' }],
    });
    axios.delete.mockResolvedValueOnce({ status: 200 });

    render(<Dashboard />);
    fireEvent.click(await screen.findByText(/delete/i));

    await waitFor(() => expect(axios.delete).toHaveBeenCalledWith(
      'http://localhost:3000/budgets/1',
      expect.any(Object)
    ));
  });

  // 5. Set a limit
  test('sets a budget limit', async () => {
    axios.post.mockResolvedValueOnce({ status: 200 });

    render(<Dashboard />);

    fireEvent.change(screen.getByPlaceholderText(/set your limit/i), { target: { value: '500' } });
    fireEvent.click(screen.getByText(/set limit/i));

    await waitFor(() => expect(axios.post).toHaveBeenCalledWith(
      'http://localhost:3000/budgets/setLimit',
      { limit: 500 },
      expect.any(Object)
    ));
  });

  // 6. Shows limit notification
  test('displays warning when total money is below limit', async () => {
    axios.get
      .mockResolvedValueOnce({ data: [{ _id: '1', name: 'Groceries', amount: 50, type: 'necessity' }] })
      .mockResolvedValueOnce({ data: { limit: 100 } });

    render(<Dashboard />);

    expect(await screen.findByText(/warning/i)).toBeInTheDocument();
  });

  // 7. Shows over-limit alert
  test('displays alert when total money exceeds limit', async () => {
    axios.get
      .mockResolvedValueOnce({ data: [{ _id: '1', name: 'Groceries', amount: 150, type: 'necessity' }] })
      .mockResolvedValueOnce({ data: { limit: 100 } });

    render(<Dashboard />);

    expect(await screen.findByText(/alert/i)).toBeInTheDocument();
  });

  // 8. Displays category statistics
  test('displays category statistics correctly', async () => {
    axios.get.mockResolvedValueOnce({
      data: [
        { _id: '1', name: 'Groceries', amount: 50, type: 'necessity' },
        { _id: '2', name: 'Netflix', amount: 20, type: 'luxury' },
      ],
    });

    render(<Dashboard />);

    expect(await screen.findByText(/necessity: \$50/i)).toBeInTheDocument();
    expect(screen.getByText(/luxury: \$20/i)).toBeInTheDocument();
  });

  // 9. Handles fetch error gracefully
  test('handles fetch budgets error', async () => {
    axios.get.mockRejectedValueOnce(new Error('Failed to fetch budgets'));

    render(<Dashboard />);

    expect(await screen.findByText(/error fetching budgets/i)).toBeInTheDocument();
  });

  // 10. Validates budget input
  test('displays validation error for invalid limit input', async () => {
    render(<Dashboard />);

    fireEvent.change(screen.getByPlaceholderText(/set your limit/i), { target: { value: '-100' } });
    fireEvent.click(screen.getByText(/set limit/i));

    expect(await screen.findByText(/please enter a valid positive limit/i)).toBeInTheDocument();
  });
});
